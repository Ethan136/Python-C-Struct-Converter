<?xml version="1.0" encoding="UTF-8"?>
<struct_model_tests>
    <test_case name="bitfield_basic" description="Test struct with bitfields">
        <struct_definition><![CDATA[
            struct A {
                int a : 1;
                int b : 2;
                int c : 5;
            };
        ]]></struct_definition>
        <input_data>
            <hex>8d000000</hex>
        </input_data>
        <expected_results>
            <member name="a" value="1"/>
            <member name="b" value="2"/>
            <member name="c" value="17"/>
        </expected_results>
    </test_case>
    <test_case name="padding_and_pointer" description="Test struct with padding and pointer">
        <struct_definition><![CDATA[
            struct B {
                char a;
                int* ptr;
            };
        ]]></struct_definition>
        <input_data>
            <hex>0100000000000000</hex>
        </input_data>
        <expected_results>
            <member name="a" value="0"/>
            <member name="ptr" value="1"/>
        </expected_results>
    </test_case>
    <test_case name="simple_struct" description="Test parsing simple struct" endianness="little">
        <struct_definition><![CDATA[
            struct SimpleStruct {
                int value1;
                char value2;
            };
        ]]></struct_definition>
        <input_data>
            <hex>0100000041000000</hex>
        </input_data>
        <expected_results>
            <member name="value1" value="1"/>
            <member name="value2" value="65"/>
        </expected_results>
    </test_case>
    <test_case name="bool_struct" description="Test parsing boolean values" endianness="little">
        <struct_definition><![CDATA[
            struct BoolStruct {
                bool flag1;
                bool flag2;
            };
        ]]></struct_definition>
        <input_data>
            <hex>0100</hex>
        </input_data>
        <expected_results>
            <member name="flag1" value="True"/>
            <member name="flag2" value="False"/>
        </expected_results>
    </test_case>
    <test_case name="padding_struct" description="Test parsing with padding" endianness="little">
        <struct_definition><![CDATA[
            struct PaddingStruct {
                char a;
                int b;
            };
        ]]></struct_definition>
        <input_data>
            <hex>4100000002000000</hex>
        </input_data>
        <expected_results>
            <member name="a" value="65"/>
            <member name="b" value="2"/>
        </expected_results>
    </test_case>
    <test_case name="short_input" description="Test parsing short hex input with zero padding" endianness="little">
        <struct_definition><![CDATA[
            struct ShortStruct {
                int value1;
                int value2;
            };
        ]]></struct_definition>
        <input_data>
            <hex>01000000</hex>
        </input_data>
        <expected_results>
            <member name="value1" value="0"/>
            <member name="value2" value="1"/>
        </expected_results>
    </test_case>
    <test_case name="big_endian" description="Test parsing with big endian byte order" endianness="big">
        <struct_definition><![CDATA[
            struct EndianStruct {
                int value1;
                short value2;
            };
        ]]></struct_definition>
        <input_data>
            <hex>0000000100020000</hex>
        </input_data>
        <expected_results>
            <member name="value1" value="1"/>
            <member name="value2" value="2"/>
        </expected_results>
    </test_case>
    <test_case name="struct_a_8byte_units" description="Test struct A { char s; long long val; } with 8-byte hex units" endianness="little">
        <struct_definition><![CDATA[
            struct A {
                char s;
                long long val;
            };
        ]]></struct_definition>
        <input_data>
            <hex>12330000000000001210000000000000</hex>
        </input_data>
        <expected_results>
            <member name="s" value="18"/>
            <member name="val" value="4114"/>
        </expected_results>
    </test_case>
    <test_case name="pointer_struct" description="Test parsing pointer values" endianness="little">
        <struct_definition><![CDATA[
            struct PointerStruct {
                char a;
                int* ptr;
            };
        ]]></struct_definition>
        <input_data>
            <hex>00000000410000001234567890abcdef</hex>
        </input_data>
        <expected_results>
            <member name="a" value="0"/>
            <member name="ptr" value="17279655982273016850"/>
        </expected_results>
    </test_case>
    <test_case name="bitfield_struct" description="Test parsing hex data for struct with bit fields" endianness="little">
        <struct_definition><![CDATA[
            struct BitFieldStruct {
                int a : 1;
                int b : 2;
                int c : 5;
            };
        ]]></struct_definition>
        <input_data>
            <hex>8d000000</hex>
        </input_data>
        <expected_results>
            <member name="a" value="1"/>
            <member name="b" value="2"/>
            <member name="c" value="17"/>
        </expected_results>
    </test_case>
    <test_case name="struct_a_endian_comparison" description="Test struct A with both little endian and big endian to show the difference" endianness="both">
        <struct_definition><![CDATA[
            struct A {
                char s;
                long long val;
            };
        ]]></struct_definition>
        <input_data>
            <hex>12330000000000001210000000000000</hex>
        </input_data>
        <expected_results>
            <member name="s" value_little="18" value_big="18"/>
            <member name="val" value_little="4114" value_big="1301540292310073344"/>
        </expected_results>
    </test_case>
    <test_case name="struct_a_8byte_field_short_hex" description="Test 8-byte field with short hex input '121' should be padded to '0000000000000121'" endianness="both">
        <struct_definition><![CDATA[
            struct A {
                long long val;
            };
        ]]></struct_definition>
        <input_data>
            <hex>121</hex>
        </input_data>
        <expected_results>
            <member name="val" value_little="2378182078228332544" value_big="289" hex_raw="0000000000000121"/>
        </expected_results>
    </test_case>

    <test_case name="layout_empty_members" description="Empty struct layout">
        <struct_definition><![CDATA[
            struct Empty {
            };
        ]]></struct_definition>
        <expected_total_size>0</expected_total_size>
        <expected_struct_align>1</expected_struct_align>
        <expected_layout_len>0</expected_layout_len>
    </test_case>

    <test_case name="layout_simple_no_padding" description="No padding required">
        <struct_definition><![CDATA[
            struct Simple {
                char a;
                char b;
                char c;
            };
        ]]></struct_definition>
        <expected_total_size>3</expected_total_size>
        <expected_struct_align>1</expected_struct_align>
        <expected_layout_len>3</expected_layout_len>
        <expected_results>
            <member name="a" type="char" size="1" offset="0"/>
            <member name="b" type="char" size="1" offset="1"/>
            <member name="c" type="char" size="1" offset="2"/>
        </expected_results>
    </test_case>

    <test_case name="layout_with_padding" description="Padding between char and int">
        <struct_definition><![CDATA[
            struct Pad {
                char a;
                int b;
            };
        ]]></struct_definition>
        <expected_total_size>8</expected_total_size>
        <expected_struct_align>4</expected_struct_align>
        <expected_layout_len>3</expected_layout_len>
        <expected_results>
            <member name="a" type="char" size="1" offset="0"/>
            <member name="(padding)" type="padding" size="3" offset="1"/>
            <member name="b" type="int" size="4" offset="4"/>
        </expected_results>
    </test_case>

    <test_case name="layout_final_padding" description="Final padding at end">
        <struct_definition><![CDATA[
            struct EndPad {
                int a;
                char b;
            };
        ]]></struct_definition>
        <expected_total_size>8</expected_total_size>
        <expected_struct_align>4</expected_struct_align>
        <expected_layout_len>3</expected_layout_len>
        <expected_results>
            <member name="a" type="int" size="4" offset="0"/>
            <member name="b" type="char" size="1" offset="4"/>
            <member name="(final padding)" type="padding" size="3" offset="5"/>
        </expected_results>
    </test_case>

    <test_case name="layout_complex_struct" description="Complex layout with multiple paddings">
        <struct_definition><![CDATA[
            struct Complex {
                char a;
                int b;
                char c;
                double d;
            };
        ]]></struct_definition>
        <expected_total_size>24</expected_total_size>
        <expected_struct_align>8</expected_struct_align>
        <expected_layout_len>6</expected_layout_len>
        <expected_results>
            <member name="a" type="char" size="1" offset="0"/>
            <member name="(padding)" type="padding" size="3" offset="1"/>
            <member name="b" type="int" size="4" offset="4"/>
            <member name="c" type="char" size="1" offset="8"/>
            <member name="(padding)" type="padding" size="7" offset="9"/>
            <member name="d" type="double" size="8" offset="16"/>
        </expected_results>
    </test_case>

    <test_case name="layout_pointer_alignment" description="Pointer alignment on 64-bit">
        <struct_definition><![CDATA[
            struct P {
                char a;
                int* ptr;
            };
        ]]></struct_definition>
        <expected_total_size>16</expected_total_size>
        <expected_struct_align>8</expected_struct_align>
        <expected_layout_len>3</expected_layout_len>
        <expected_results>
            <member name="a" type="char" size="1" offset="0"/>
            <member name="(padding)" type="padding" size="7" offset="1"/>
            <member name="ptr" type="pointer" size="8" offset="8"/>
        </expected_results>
    </test_case>

    <test_case name="layout_bitfield_packing" description="Bitfield layout packed into single int">
        <struct_definition><![CDATA[
            struct BitFields {
                int a : 1;
                int b : 2;
                int c : 5;
            };
        ]]></struct_definition>
        <expected_total_size>4</expected_total_size>
        <expected_struct_align>4</expected_struct_align>
        <expected_layout_len>3</expected_layout_len>
        <expected_results>
            <member name="a" type="int" size="4" offset="0" is_bitfield="true" bit_offset="0" bit_size="1"/>
            <member name="b" type="int" size="4" offset="0" is_bitfield="true" bit_offset="1" bit_size="2"/>
            <member name="c" type="int" size="4" offset="0" is_bitfield="true" bit_offset="3" bit_size="5"/>
        </expected_results>
    </test_case>

    <test_case name="layout_padding_fields_info" description="Padding entries carry bitfield fields">
        <struct_definition><![CDATA[
            struct PadInfo {
                char a;
                int b;
                char c;
            };
        ]]></struct_definition>
        <expected_total_size>12</expected_total_size>
        <expected_struct_align>4</expected_struct_align>
        <expected_layout_len>5</expected_layout_len>
        <expected_results>
            <member name="a" type="char" size="1" offset="0" is_bitfield="false" bit_offset="0" bit_size="8"/>
            <member name="(padding)" type="padding" size="3" offset="1" is_bitfield="false" bit_offset="0" bit_size="24"/>
            <member name="b" type="int" size="4" offset="4"/>
            <member name="c" type="char" size="1" offset="8"/>
            <member name="(final padding)" type="padding" size="3" offset="9" is_bitfield="false" bit_offset="0" bit_size="24"/>
        </expected_results>
    </test_case>
    <test_case name="combined_example_struct" description="Complex struct from example.h">
        <struct_definition><![CDATA[
            struct CombinedExample {
                char      a;
                int       b;
                int       c1 : 1;
                int       c2 : 2;
                int       c3 : 5;
                char      d;
                long long e;
                unsigned char f;
                char*     g;
            };
        ]]></struct_definition>
        <expected_total_size>40</expected_total_size>
        <expected_struct_align>8</expected_struct_align>
        <expected_layout_len>12</expected_layout_len>
        <expected_results>
            <member name="a" type="char" size="1" offset="0"/>
            <member name="(padding)" type="padding" size="3" offset="1"/>
            <member name="b" type="int" size="4" offset="4"/>
            <member name="c1" type="int" size="4" offset="8" is_bitfield="true" bit_offset="0" bit_size="1"/>
            <member name="c2" type="int" size="4" offset="8" is_bitfield="true" bit_offset="1" bit_size="2"/>
            <member name="c3" type="int" size="4" offset="8" is_bitfield="true" bit_offset="3" bit_size="5"/>
            <member name="d" type="char" size="1" offset="12"/>
            <member name="(padding)" type="padding" size="3" offset="13"/>
            <member name="e" type="long long" size="8" offset="16"/>
            <member name="f" type="unsigned char" size="1" offset="24"/>
            <member name="(padding)" type="padding" size="7" offset="25"/>
            <member name="g" type="pointer" size="8" offset="32"/>
        </expected_results>
    </test_case>
</struct_model_tests> 