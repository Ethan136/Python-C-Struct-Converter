<?xml version="1.0" encoding="UTF-8"?>
<struct_parsing_tests>
    <!-- Parsing tests -->
    <test_case name="valid_struct_definition" type="parse">
        <struct_definition><![CDATA[
            struct TestStruct {
                char a;
                int b;
                long long c;
            };
        ]]></struct_definition>
        <expected_struct_name>TestStruct</expected_struct_name>
        <expected_members>
            <member type="char" name="a" />
            <member type="int" name="b" />
            <member type="long long" name="c" />
        </expected_members>
    </test_case>

    <test_case name="struct_with_bitfields" type="parse">
        <struct_definition><![CDATA[
            struct BitFieldStruct {
                int a : 1;
                int b : 2;
                char c;
                int d : 3;
            };
        ]]></struct_definition>
        <expected_struct_name>BitFieldStruct</expected_struct_name>
        <expected_members>
            <member type="int" name="a" is_bitfield="true" bit_size="1" />
            <member type="int" name="b" is_bitfield="true" bit_size="2" />
            <member type="char" name="c" />
            <member type="int" name="d" is_bitfield="true" bit_size="3" />
        </expected_members>
    </test_case>

    <test_case name="struct_with_pointer" type="parse">
        <struct_definition><![CDATA[
            struct PointerStruct {
                int* ptr;
                char* str;
            };
        ]]></struct_definition>
        <expected_struct_name>PointerStruct</expected_struct_name>
        <expected_members>
            <member type="pointer" name="ptr" />
            <member type="pointer" name="str" />
        </expected_members>
    </test_case>

    <test_case name="struct_with_unsigned_types" type="parse">
        <struct_definition><![CDATA[
            struct UnsignedStruct {
                unsigned int a;
                unsigned long b;
            };
        ]]></struct_definition>
        <expected_struct_name>UnsignedStruct</expected_struct_name>
        <expected_members>
            <member type="unsigned int" name="a" />
            <member type="unsigned long" name="b" />
        </expected_members>
    </test_case>

    <test_case name="struct_with_whitespace" type="parse">
        <struct_definition><![CDATA[
            struct WhitespaceStruct {
                char    a;
                int     b;
                long long   c;
            };
        ]]></struct_definition>
        <expected_struct_name>WhitespaceStruct</expected_struct_name>
        <expected_members>
            <member type="char" name="a" />
            <member type="int" name="b" />
            <member type="long long" name="c" />
        </expected_members>
    </test_case>

    <test_case name="struct_with_unknown_type" type="parse">
        <struct_definition><![CDATA[
            struct UnknownStruct {
                char a;
                unknown_type b;
                int c;
            };
        ]]></struct_definition>
        <expected_struct_name>UnknownStruct</expected_struct_name>
        <expected_members>
            <member type="char" name="a" />
            <member type="int" name="c" />
        </expected_members>
    </test_case>

    <test_case name="invalid_struct_no_match" type="parse">
        <struct_definition>This is not a struct definition</struct_definition>
        <expect_none />
    </test_case>

    <test_case name="nested_struct_basic" type="parse">
        <struct_definition><![CDATA[
            struct Outer {
                struct Inner {
                    int x;
                    char y;
                } a;
                int b;
            };
        ]]></struct_definition>
        <expected_struct_name>Outer</expected_struct_name>
        <expected_members>
            <member type="struct" name="a">
                <nested_members>
                    <member type="int" name="x" />
                    <member type="char" name="y" />
                </nested_members>
            </member>
            <member type="int" name="b" />
        </expected_members>
    </test_case>

    <test_case name="nested_union_basic" type="parse">
        <struct_definition><![CDATA[
            struct Outer {
                union U {
                    int x;
                    char y;
                } a;
                int b;
            };
        ]]></struct_definition>
        <expected_struct_name>Outer</expected_struct_name>
        <expected_members>
            <member type="union" name="a">
                <nested_members>
                    <member type="int" name="x" />
                    <member type="char" name="y" />
                </nested_members>
            </member>
            <member type="int" name="b" />
        </expected_members>
    </test_case>
    <test_case name="union_with_struct" type="parse">
        <struct_definition><![CDATA[
            struct S {
                union U {
                    struct Inner {
                        int a;
                        char b;
                    } s;
                    int x;
                } u;
            };
        ]]></struct_definition>
        <expected_struct_name>S</expected_struct_name>
        <expected_members>
            <member type="union" name="u">
                <nested_members>
                    <member type="struct" name="s">
                        <nested_members>
                            <member type="int" name="a" />
                            <member type="char" name="b" />
                        </nested_members>
                    </member>
                    <member type="int" name="x" />
                </nested_members>
            </member>
        </expected_members>
    </test_case>
    <test_case name="union_with_array" type="parse">
        <struct_definition><![CDATA[
            struct S {
                union U {
                    int arr[4];
                    char c;
                } u;
            };
        ]]></struct_definition>
        <expected_struct_name>S</expected_struct_name>
        <expected_members>
            <member type="union" name="u">
                <nested_members>
                    <member type="int" name="arr" array_dims="4" />
                    <member type="char" name="c" />
                </nested_members>
            </member>
        </expected_members>
    </test_case>
    <test_case name="union_with_bitfield" type="parse">
        <struct_definition><![CDATA[
            struct S {
                union U {
                    int a : 3;
                    int b : 5;
                } u;
            };
        ]]></struct_definition>
        <expected_struct_name>S</expected_struct_name>
        <expected_members>
            <member type="union" name="u">
                <nested_members>
                    <member type="int" name="a" is_bitfield="true" bit_size="3" />
                    <member type="int" name="b" is_bitfield="true" bit_size="5" />
                </nested_members>
            </member>
        </expected_members>
    </test_case>
    <test_case name="struct_union_mix" type="parse">
        <struct_definition><![CDATA[
            struct S {
                struct Inner {
                    int a;
                } s;
                union U {
                    char c;
                    int d;
                } u;
            };
        ]]></struct_definition>
        <expected_struct_name>S</expected_struct_name>
        <expected_members>
            <member type="struct" name="s">
                <nested_members>
                    <member type="int" name="a" />
                </nested_members>
            </member>
            <member type="union" name="u">
                <nested_members>
                    <member type="char" name="c" />
                    <member type="int" name="d" />
                </nested_members>
            </member>
        </expected_members>
    </test_case>

    <test_case name="anonymous_bitfield_struct" type="parse">
        <struct_definition><![CDATA[
            struct AnonBitfield {
                int a : 3;
                int : 2;
                int b : 5;
            };
        ]]></struct_definition>
        <expected_struct_name>AnonBitfield</expected_struct_name>
        <expected_members>
            <member type="int" name="a" is_bitfield="true" bit_size="3" />
            <member type="int" name="" is_bitfield="true" bit_size="2" />
            <member type="int" name="b" is_bitfield="true" bit_size="5" />
        </expected_members>
    </test_case>

    <!-- Layout calculation tests -->
    <test_case name="simple_struct_no_padding" type="layout">
        <struct_definition><![CDATA[
            struct SimpleStruct {
                char a;
                char b;
                char c;
            };
        ]]></struct_definition>
        <expected_total_size>3</expected_total_size>
        <expected_alignment>1</expected_alignment>
        <expected_layout>
            <entry name="a" offset="0" size="1" />
            <entry name="b" offset="1" size="1" />
            <entry name="c" offset="2" size="1" />
        </expected_layout>
    </test_case>

    <test_case name="struct_with_padding_layout" type="layout">
        <struct_definition><![CDATA[
            struct PaddingStruct {
                char a;
                int b;
                char c;
            };
        ]]></struct_definition>
        <expected_total_size>12</expected_total_size>
        <expected_alignment>4</expected_alignment>
        <expected_layout>
            <entry name="a" offset="0" size="1" />
            <entry type="padding" size="3" />
            <entry name="b" offset="4" size="4" />
            <entry name="c" offset="8" size="1" />
            <entry type="padding" size="3" />
        </expected_layout>
    </test_case>

    <test_case name="bitfield_layout" type="layout">
        <struct_definition><![CDATA[
            struct BitFieldStruct {
                int a : 1;
                int b : 2;
                char c;
                int d : 3;
            };
        ]]></struct_definition>
        <expected_total_size>12</expected_total_size>
        <expected_alignment>4</expected_alignment>
        <expected_layout>
            <entry name="a" offset="0" size="4" bit_offset="0" bit_size="1" />
            <entry name="b" offset="0" size="4" bit_offset="1" bit_size="2" />
            <entry name="c" offset="4" size="1" />
            <entry type="padding" size="3" />
            <entry name="d" offset="8" size="4" bit_offset="0" bit_size="3" />
        </expected_layout>
    </test_case>

    <test_case name="array_member_single_element_layout" type="layout">
        <struct_definition><![CDATA[
            struct ArrayStruct {
                int arr[3][2];
            };
        ]]></struct_definition>
        <expected_total_size>24</expected_total_size>
        <expected_alignment>4</expected_alignment>
        <expected_layout>
            <entry name="arr[0][0]" offset="0" size="4" />
            <entry name="arr[0][1]" offset="4" size="4" />
            <entry name="arr[1][0]" offset="8" size="4" />
            <entry name="arr[1][1]" offset="12" size="4" />
            <entry name="arr[2][0]" offset="16" size="4" />
            <entry name="arr[2][1]" offset="20" size="4" />
        </expected_layout>
    </test_case>

    <test_case name="layout_item_dataclass" type="layout">
        <struct_definition><![CDATA[
            struct DataClassStruct {
                char a;
                int b;
            };
        ]]></struct_definition>
        <expected_total_size>8</expected_total_size>
        <expected_alignment>4</expected_alignment>
        <expected_layout>
            <entry name="a" offset="0" size="1" />
            <entry type="padding" size="3" />
            <entry name="b" offset="4" size="4" />
        </expected_layout>
    </test_case>

    <test_case name="union_layout_basic" type="layout">
        <struct_definition><![CDATA[
            struct S {
                union U {
                    int a;
                    char b;
                } u;
            };
        ]]></struct_definition>
        <expected_total_size>8</expected_total_size>
        <expected_alignment>4</expected_alignment>
        <expected_layout>
            <entry name="u.a" offset="0" size="4" />
            <entry name="u.b" offset="4" size="1" />
            <entry type="padding" size="3" offset="5" />
        </expected_layout>
    </test_case>
</struct_parsing_tests>
